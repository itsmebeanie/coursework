/*
Kaitlin Gu
Summer 2016, Cory Pluck
kg1292@nyu.edu

Note of running issues:
Ran into trouble when trying to create a separate rule for attributes with http:// urls

attributes:
	CONTENT ATTRIBUTE CONTENT ATTRIBUTE attributes
  |
  ;

converted to just
attributes:
	CONTENT
  |
  ;

*/

%{
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <string>

using namespace std;

// stuff from flex that bison needs to know about:
extern "C" int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;

void yyerror(const char *s);
%}

%union {
	char *sval;
}


%start root

%token <sval> OPENING_TAG
%token <sval> CLOSING_TAG
%token <sval> MATCHING_END_TAG
%token <sval> CONTENT;

%%
root:
  xml_statement
;

attributes:
	CONTENT;
  |
  ;

data: xml_statement data
						| CONTENT data
						|
						;

xml_statement: OPENING_TAG attributes MATCHING_END_TAG data CLOSING_TAG MATCHING_END_TAG {
if (strcasecmp(&($1[1]), &($5[2])) != 0) {
	cout << "No, this is invalid." << endl;
	exit(-1);
}



}
	;
%%

int main()
{
    if (yyparse() == 0){
			cout << "Yes, this is valid." << endl;
		} // A parsing function that will be generated by Bison.
    return 0;
}

void yyerror(const char *s) {
	cout << "No, this is invalid. Invalid, parsing mismatch." << s << endl;
	// might as well halt now:
	exit(-1);
}
